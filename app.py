import streamlit as st
import random

# Configuration de la page
st.set_page_config(page_title="Chatbot Tsunami", page_icon="üåä")

# Base de connaissances sur les tsunamis
knowledge_base = {
    "tsunami": "Un tsunami est une s√©rie de vagues oc√©aniques tr√®s longues g√©n√©r√©es par le d√©placement soudain d'un grand volume d'eau.",
    "causes": "Les causes principales sont : s√©ismes sous-marins (90%), glissements de terrain, √©ruptions volcaniques, ou impacts de m√©t√©orites.",
    "signes": "Signes avant-coureurs : s√©isme prolong√©, retrait soudain de la mer, bruit rugissant venant de l'oc√©an.",
    "s√©curit√©": "Consignes de s√©curit√© : s'√©loigner du rivage, gagner les hauteurs (>10m), ne pas prendre sa voiture, ne pas retourner chercher ses affaires.",
    "hauteur": "Une hauteur de 10-15 m√®tres est g√©n√©ralement suffisante, mais plus on s'√©loigne du rivage, mieux c'est.",
    "g√©omatique": "La g√©omatique aide √† cartographier les zones √† risque, mod√©liser l'impact, et planifier les √©vacuations via les SIG.",
    "dur√©e": "Un tsunami peut durer plusieurs heures, avec des vagues successives. La premi√®re vague n'est pas toujours la plus dangereuse.",
}

# Fonction pour trouver la meilleure r√©ponse
def get_response(message):
    message = message.lower()
    
    # Recherche de correspondance
    for key, value in knowledge_base.items():
        if key in message:
            return value
    
    # R√©ponses par d√©faut
    default_responses = [
        "Je suis sp√©cialis√© dans les tsunamis. Posez-moi une question sur les causes, la s√©curit√© ou la pr√©vention!",
        "Je peux vous parler des tsunamis : causes, signes avant-coureurs, consignes de s√©curit√©...",
        "Question int√©ressante ! En tant qu'expert tsunamis, je peux vous aider sur les aspects s√©curit√©, pr√©vention ou g√©omatique."
    ]
    
    return random.choice(default_responses)

# Interface Streamlit
st.title("üåä Chatbot Expert Tsunami")
st.write("Bonjour ! Je suis votre assistant sp√©cialis√© sur les tsunamis. Posez-moi vos questions !")

# Historique du chat
if "messages" not in st.session_state:
    st.session_state.messages = []

# Affichage de l'historique
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# Input utilisateur
if prompt := st.chat_input("Votre question sur les tsunamis..."):
    # Ajouter le message utilisateur
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)
    
    # G√©n√©rer la r√©ponse
    response = get_response(prompt)
    
    # Ajouter la r√©ponse de l'assistant
    st.session_state.messages.append({"role": "assistant", "content": response})
    with st.chat_message("assistant"):
        st.markdown(response)
