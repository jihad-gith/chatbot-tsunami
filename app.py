import streamlit as st
import random
import requests
import io
import base64
from PIL import Image, ImageDraw, ImageFont
import time
import re

# Configuration de la page avec design premium
st.set_page_config(
    page_title="üö® Tsunami AI Expert", 
    page_icon="üåä", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# ==================== STYLE CSS PERSONNALIS√â ====================
st.markdown("""
<style>
    .main-header {
        font-size: 3.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 0;
        font-weight: bold;
    }
    .sub-header {
        font-size: 1.2rem;
        color: #666;
        text-align: center;
        margin-bottom: 2rem;
    }
    .chat-container {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 25px;
        border-radius: 20px;
        margin-bottom: 20px;
        border: 2px solid #e0e0e0;
    }
    .sidebar-content {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 15px;
        margin: 10px 0;
        border-left: 5px solid #1f77b4;
    }
    .emergency-box {
        background: linear-gradient(135deg, #ff4444 0%, #cc0000 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        font-weight: bold;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    .question-btn {
        background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%);
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 25px;
        margin: 8px 0;
        width: 100%;
        cursor: pointer;
        transition: all 0.3s;
        font-weight: bold;
    }
    .question-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.3);
    }
    .response-box {
        background: white;
        padding: 20px;
        border-radius: 15px;
        margin: 10px 0;
        border-left: 5px solid #1f77b4;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .arabic-text {
        direction: rtl;
        text-align: right;
        font-size: 1.1em;
        line-height: 1.8;
    }
    .image-container {
        text-align: center;
        margin: 20px 0;
        padding: 15px;
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
</style>
""", unsafe_allow_html=True)

# ==================== SYST√àME MULTILINGUE ====================

LANGUAGES = {
    "üá´üá∑ Fran√ßais": "fr",
    "üá¨üáß English": "en", 
    "üá∏üá¶ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©": "ar"
}

# ==================== FONCTIONS POUR IMAGES AM√âLIOR√âES ====================

def create_educational_image(category, language):
    """Cr√©e une image √©ducative de haute qualit√©"""
    # Cr√©er une image plus grande et d√©taill√©e
    img = Image.new('RGB', (600, 400), color=(240, 245, 249))
    d = ImageDraw.Draw(img)
    
    try:
        # Essayer de charger une police, sinon utiliser la police par d√©faut
        font_large = ImageFont.load_default()
        font_medium = ImageFont.load_default()
    except:
        font_large = ImageFont.load_default()
        font_medium = ImageFont.load_default()
    
    # Couleurs
    primary_color = (41, 128, 185)  # Bleu
    secondary_color = (231, 76, 60)   # Rouge
    accent_color = (46, 204, 113)     # Vert
    text_color = (44, 62, 80)         # Gris fonc√©
    
    # Dessiner un en-t√™te
    d.rectangle([0, 0, 600, 60], fill=primary_color)
    
    # Textes selon la cat√©gorie et la langue
    titles = {
        "definition": {
            "fr": "üåä DIAGRAMME DU TSUNAMI", 
            "en": "üåä TSUNAMI DIAGRAM", 
            "ar": "üåä ŸÖÿÆÿ∑ÿ∑ ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"
        },
        "causes": {
            "fr": "üìå CAUSES DU TSUNAMI", 
            "en": "üìå TSUNAMI CAUSES", 
            "ar": "üìå ÿ£ÿ≥ÿ®ÿßÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"
        },
        "consequences": {
            "fr": "üí• CONS√âQUENCES DU TSUNAMI", 
            "en": "üí• TSUNAMI CONSEQUENCES", 
            "ar": "üí• ÿπŸàÿßŸÇÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"
        },
        "safety": {
            "fr": "üõ°Ô∏è S√âCURIT√â TSUNAMI", 
            "en": "üõ°Ô∏è TSUNAMI SAFETY", 
            "ar": "üõ°Ô∏è ÿ≥ŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"
        }
    }
    
    # Dessiner le titre
    title = titles[category][language]
    d.text((300, 30), title, fill=(255, 255, 255), anchor="mm", font=font_large)
    
    # Dessiner des √©l√©ments √©ducatifs d√©taill√©s selon la cat√©gorie
    if category == "definition":
        # Diagramme de vague tsunami
        d.rectangle([100, 100, 500, 250], outline=primary_color, width=3)
        
        # Ligne d'eau
        d.line([100, 175, 500, 175], fill=primary_color, width=2)
        d.text((80, 170), "Niveau mer", fill=text_color, anchor="rm")
        
        # Fl√®che de hauteur
        d.line([150, 175, 150, 120], fill=secondary_color, width=2)
        d.line([145, 125, 150, 120], fill=secondary_color, width=2)
        d.line([155, 125, 150, 120], fill=secondary_color, width=2)
        d.text((170, 145), "Hauteur vague\n30m max", fill=secondary_color)
        
        # Fl√®che de longueur
        d.line([100, 280, 500, 280], fill=accent_color, width=2)
        d.line([495, 275, 500, 280], fill=accent_color, width=2)
        d.line([495, 285, 500, 280], fill=accent_color, width=2)
        d.text((300, 300), "Longueur d'onde: 100-200km", fill=accent_color, anchor="mm")
        
    elif category == "causes":
        # Diagramme des causes
        y_positions = [120, 180, 240, 300]
        causes = [
            ("S√©isme sous-marin", "90%"),
            ("Glissement terrain", "5%"),
            ("√âruption volcanique", "4%"),
            ("Impact m√©t√©orite", "1%")
        ]
        
        for i, (cause, percentage) in enumerate(causes):
            x_start = 150
            bar_width = int(300 * (int(percentage.strip('%')) / 100))
            
            # Barre de pourcentage
            d.rectangle([x_start, y_positions[i], x_start + bar_width, y_positions[i] + 30], 
                       fill=primary_color, outline=text_color, width=1)
            
            # Texte
            d.text((x_start - 10, y_positions[i] + 15), cause, fill=text_color, anchor="rm")
            d.text((x_start + bar_width + 10, y_positions[i] + 15), percentage, 
                  fill=secondary_color, anchor="lm")
        
    elif category == "consequences":
        # Ic√¥nes des cons√©quences
        consequences = [
            ("üë• Victimes", "230k (2004)"),
            ("üè† Destructions", "Infrastructures"),
            ("üí∞ Co√ªt", "Milliards $"),
            ("üåç Environnement", "Pollution")
        ]
        
        for i, (consequence, detail) in enumerate(consequences):
            x = 150 + (i % 2) * 200
            y = 120 + (i // 2) * 100
            
            # Cercle avec ic√¥ne
            d.ellipse([x-30, y-30, x+30, y+30], outline=secondary_color, width=2)
            d.text((x, y-5), consequence.split()[0], fill=text_color, anchor="mm")
            d.text((x, y+40), detail, fill=text_color, anchor="mm", font=font_medium)
            
    elif category == "safety":
        # √âtapes de s√©curit√©
        steps = [
            ("1. S'√©loigner", "Du rivage"),
            ("2. Monter", "> 15m hauteur"),
            ("3. Alerter", "Les personnes"),
            ("4. Ne pas prendre", "La voiture")
        ]
        
        for i, (step, detail) in enumerate(steps):
            x = 150
            y = 120 + i * 70
            
            # Num√©ro dans un cercle
            d.ellipse([x-25, y-25, x+25, y+25], fill=accent_color, outline=accent_color)
            d.text((x, y), str(i+1), fill=(255, 255, 255), anchor="mm", font=font_large)
            
            # Texte de l'√©tape
            d.text((x+50, y-10), step, fill=text_color, anchor="lm", font=font_large)
            d.text((x+50, y+10), detail, fill=text_color, anchor="lm", font=font_medium)
    
    # Pied de page
    d.rectangle([0, 370, 600, 400], fill=(52, 73, 94))
    d.text((300, 385), "Tsunami AI Expert - Illustration √âducative", 
          fill=(255, 255, 255), anchor="mm", font=font_medium)
    
    # Convertir en base64
    buffered = io.BytesIO()
    img.save(buffered, format="PNG", quality=95)
    img_str = base64.b64encode(buffered.getvalue()).decode()
    
    return img_str

def display_base64_image(base64_string, caption):
    """Affiche une image encod√©e en base64 - CORRIG√â avec use_container_width"""
    try:
        # D√©coder l'image base64
        image_data = base64.b64decode(base64_string)
        image = Image.open(io.BytesIO(image_data))
        
        # Afficher l'image avec Streamlit - CORRECTION APPLIQU√âE
        st.image(image, caption=caption, use_container_width=True)  # use_container_width au lieu de use_column_width
    except Exception as e:
        # En cas d'erreur, afficher un message
        st.info("üñºÔ∏è *Illustration √©ducative g√©n√©r√©e*")

# ==================== BASE DE CONNAISSANCES AVANC√âE ====================

KNOWLEDGE_BASE = {
    "definition": {
        "keywords": {
            "fr": ["d√©finition", "qu'est-ce", "c'est quoi", "explique", "d√©finir", "quoi", "image", "diagramme", "sch√©ma"],
            "en": ["definition", "what is", "explain", "define", "what", "image", "diagram", "schema"],
            "ar": ["ÿ™ÿπÿ±ŸäŸÅ", "ŸÖÿß ŸáŸà", "ÿ¥ÿ±ÿ≠", "ŸÖÿßŸáŸà", "ŸÖÿß", "ÿµŸàÿ±ÿ©", "ŸÖÿÆÿ∑ÿ∑", "ÿ±ÿ≥ŸÖ"]
        },
        "responses": {
            "fr": """
üåä **D√âFINITION DU TSUNAMI**

**Un tsunami** est une s√©rie de vagues oc√©aniques extr√™mement longues g√©n√©r√©es par le d√©placement soudain d'un grand volume d'eau.

**Caract√©ristiques principales :**
‚Ä¢ Longueur d'onde : 100-200 km (vs 100m pour vagues normales)
‚Ä¢ Vitesse : 500-800 km/h en eau profonde
‚Ä¢ Hauteur : 1m en mer ‚Üí 10-30m pr√®s des c√¥tes
‚Ä¢ P√©riode : 10-60 minutes entre vagues

**Diff√©rence avec une vague normale :**
Ce n'est PAS une simple grosse vague, mais un mouvement de toute la colonne d'eau du fond √† la surface.
            """,
            "en": """
üåä **TSUNAMI DEFINITION**

**A tsunami** is a series of extremely long ocean waves generated by the sudden displacement of a large volume of water.

**Key characteristics:**
‚Ä¢ Wavelength: 100-200 km (vs 100m for normal waves)
‚Ä¢ Speed: 500-800 km/h in deep water
‚Ä¢ Height: 1m at sea ‚Üí 10-30m near coasts
‚Ä¢ Period: 10-60 minutes between waves

**Difference from normal waves:**
It is NOT just a big wave, but movement of the entire water column from bottom to surface.
            """,
            "ar": """
üåä **ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä**

**ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä** ŸáŸà ÿ≥ŸÑÿ≥ŸÑÿ© ŸÖŸÜ ÿ£ŸÖŸàÿßÿ¨ ÿßŸÑŸÖÿ≠Ÿäÿ∑ ÿßŸÑÿ∑ŸàŸäŸÑÿ© ÿ¨ÿØŸãÿß ÿßŸÑŸÜÿßÿ™ÿ¨ÿ© ÿπŸÜ ÿßŸÑÿßŸÜÿ≤Ÿäÿßÿ≠ ÿßŸÑŸÖŸÅÿßÿ¨ÿ¶ ŸÑÿ≠ÿ¨ŸÖ ŸÉÿ®Ÿäÿ± ŸÖŸÜ ÿßŸÑŸÖÿßÿ°.

**ÿßŸÑÿÆÿµÿßÿ¶ÿµ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:**
‚Ä¢ ÿßŸÑÿ∑ŸàŸÑ ÿßŸÑŸÖŸàÿ¨Ÿä: 100-200 ŸÉŸÖ (ŸÖŸÇÿßÿ®ŸÑ 100ŸÖ ŸÑŸÑÿ£ŸÖŸàÿßÿ¨ ÿßŸÑÿπÿßÿØŸäÿ©)
‚Ä¢ ÿßŸÑÿ≥ÿ±ÿπÿ©: 500-800 ŸÉŸÖ/ÿ≥ÿßÿπÿ© ŸÅŸä ÿßŸÑŸÖŸäÿßŸá ÿßŸÑÿπŸÖŸäŸÇÿ©
‚Ä¢ ÿßŸÑÿßÿ±ÿ™ŸÅÿßÿπ: 1ŸÖ ŸÅŸä ÿßŸÑÿ®ÿ≠ÿ± ‚Üí 10-30ŸÖ ÿ®ÿßŸÑŸÇÿ±ÿ® ŸÖŸÜ ÿßŸÑÿ≥Ÿàÿßÿ≠ŸÑ
‚Ä¢ ÿßŸÑŸÅÿ™ÿ±ÿ©: 10-60 ÿØŸÇŸäŸÇÿ© ÿ®ŸäŸÜ ÿßŸÑÿ£ŸÖŸàÿßÿ¨

**ÿßŸÑŸÅÿ±ŸÇ ÿπŸÜ ÿßŸÑŸÖŸàÿ¨ ÿßŸÑÿπÿßÿØŸä:**
ŸÑŸäÿ≥ ŸÖÿ¨ÿ±ÿØ ŸÖŸàÿ¨ÿ© ŸÉÿ®Ÿäÿ±ÿ©ÿå ŸàŸÑŸÉŸÜ ÿ≠ÿ±ŸÉÿ© ÿπŸÖŸàÿØ ÿßŸÑŸÖÿßÿ° ÿ®ÿßŸÑŸÉÿßŸÖŸÑ ŸÖŸÜ ÿßŸÑŸÇÿßÿπ ÿ•ŸÑŸâ ÿßŸÑÿ≥ÿ∑ÿ≠.
            """
        }
    },
    
    "causes": {
        "keywords": {
            "fr": ["cause", "provoque", "origine", "pourquoi", "s√©isme", "tremblement", "volcan", "image causes"],
            "en": ["cause", "causes", "why", "origin", "earthquake", "volcano", "trigger", "cause image"],
            "ar": ["ÿ≥ÿ®ÿ®", "ÿ£ÿ≥ÿ®ÿßÿ®", "ŸÑŸÖÿßÿ∞ÿß", "ŸÖÿµÿØÿ±", "ÿ≤ŸÑÿ≤ÿßŸÑ", "ÿ®ÿ±ŸÉÿßŸÜ", "Ÿäÿ™ÿ≥ÿ®ÿ®", "ÿµŸàÿ±ÿ© ÿ£ÿ≥ÿ®ÿßÿ®"]
        },
        "responses": {
            "fr": """
üìå **CAUSES DES TSUNAMIS**

**Principales causes (par ordre de fr√©quence) :**

1. **S√©ismes sous-marins (90% des cas)**
   ‚Ä¢ Magnitude > 7.0 sur l'√©chelle de Richter
   ‚Ä¢ Mouvement vertical des failles
   ‚Ä¢ Exemple : Japon 2011 (magnitude 9.0)

2. **Glissements de terrain sous-marins**
   ‚Ä¢ Effondrement de s√©diments
   ‚Ä¢ Volumes pouvant atteindre des km¬≥

3. **√âruptions volcaniques**
   ‚Ä¢ Effondrement de volcans sous-marins
   ‚Ä¢ Pyroclastiques entrant dans l'eau

4. **Impacts de m√©t√©orites**
   ‚Ä¢ √âv√©nements rares mais d√©vastateurs

**M√©canisme :** D√©placement vertical du fond marin ‚Üí D√©placement de la colonne d'eau ‚Üí Formation d'ondes.
            """,
            "en": """
üìå **TSUNAMI CAUSES**

**Main causes (by frequency order):**

1. **Undersea earthquakes (90% of cases)**
   ‚Ä¢ Magnitude > 7.0 on Richter scale
   ‚Ä¢ Vertical fault movement
   ‚Ä¢ Example: Japan 2011 (magnitude 9.0)

2. **Submarine landslides**
   ‚Ä¢ Sediment collapse
   ‚Ä¢ Volumes up to km¬≥

3. **Volcanic eruptions**
   ‚Ä¢ Underwater volcano collapse
   ‚Ä¢ Pyroclastics entering water

4. **Meteorite impacts**
   ‚Ä¢ Rare but devastating events

**Mechanism:** Vertical seabed displacement ‚Üí Water column displacement ‚Üí Wave formation.
            """,
            "ar": """
üìå **ÿ£ÿ≥ÿ®ÿßÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä**

**ÿßŸÑÿ£ÿ≥ÿ®ÿßÿ® ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© (ÿ≠ÿ≥ÿ® ÿßŸÑÿ™ÿ±ÿ™Ÿäÿ® ÿßŸÑÿ™ŸÉÿ±ÿßÿ±Ÿä):**

1. **ÿßŸÑÿ≤ŸÑÿßÿ≤ŸÑ ÿ™ÿ≠ÿ™ ÿßŸÑÿ®ÿ≠ÿ± (90Ÿ™ ŸÖŸÜ ÿßŸÑÿ≠ÿßŸÑÿßÿ™)**
   ‚Ä¢ ŸÇŸàÿ© ÿ£ŸÉÿ®ÿ± ŸÖŸÜ 7.0 ÿπŸÑŸâ ŸÖŸÇŸäÿßÿ≥ ÿ±ŸäÿÆÿ™ÿ±
   ‚Ä¢ ÿ≠ÿ±ŸÉÿ© ÿßŸÑÿµÿØŸàÿπ ÿßŸÑÿπŸÖŸàÿØŸäÿ©
   ‚Ä¢ ŸÖÿ´ÿßŸÑ: ÿßŸÑŸäÿßÿ®ÿßŸÜ 2011 (ŸÇŸàÿ© 9.0)

2. **ÿßŸÑÿßŸÜŸáŸäÿßÿ±ÿßÿ™ ÿßŸÑÿ£ÿ±ÿ∂Ÿäÿ© ÿ™ÿ≠ÿ™ ÿßŸÑÿ®ÿ≠ÿ±**
   ‚Ä¢ ÿßŸÜŸáŸäÿßÿ± ÿßŸÑÿ±Ÿàÿßÿ≥ÿ®
   ‚Ä¢ ÿ£ÿ≠ÿ¨ÿßŸÖ ÿ™ÿµŸÑ ÿ•ŸÑŸâ ŸÉŸäŸÑŸàŸÖÿ™ÿ±ÿßÿ™ ŸÖŸÉÿπÿ®ÿ©

3. **ÿßŸÑÿ´Ÿàÿ±ÿßÿ™ ÿßŸÑÿ®ÿ±ŸÉÿßŸÜŸäÿ©**
   ‚Ä¢ ÿßŸÜŸáŸäÿßÿ± ÿßŸÑÿ®ÿ±ÿßŸÉŸäŸÜ ÿ™ÿ≠ÿ™ ÿßŸÑŸÖÿßÿ°
   ‚Ä¢ ÿØÿÆŸàŸÑ ÿßŸÑŸÖŸàÿßÿØ ÿßŸÑÿ®ÿ±ŸÉÿßŸÜŸäÿ© ÿ•ŸÑŸâ ÿßŸÑŸÖÿßÿ°

4. **ÿßÿµÿ∑ÿØÿßŸÖ ÿßŸÑŸÜŸäÿßÿ≤ŸÉ**
   ‚Ä¢ ÿ£ÿ≠ÿØÿßÿ´ ŸÜÿßÿØÿ±ÿ© ŸàŸÑŸÉŸÜ ŸÖÿØŸÖÿ±ÿ©

**ÿßŸÑÿ¢ŸÑŸäÿ©:** ÿßŸÑÿßŸÜÿ≤Ÿäÿßÿ≠ ÿßŸÑÿ±ÿ£ÿ≥Ÿä ŸÑŸÇÿßÿπ ÿßŸÑÿ®ÿ≠ÿ± ‚Üí ÿ•ÿ≤ÿßÿ≠ÿ© ÿπŸÖŸàÿØ ÿßŸÑŸÖÿßÿ° ‚Üí ÿ™ŸÉŸàŸäŸÜ ÿßŸÑŸÖŸàÿ¨.
            """
        }
    },
    
    "consequences": {
        "keywords": {
            "fr": ["cons√©quence", "impact", "effet", "d√©g√¢t", "destruction", "victime", "image impacts"],
            "en": ["consequence", "impact", "effect", "damage", "destruction", "victim", "impact image"],
            "ar": ["ÿπÿßŸÇÿ®ÿ©", "ÿ™ÿ£ÿ´Ÿäÿ±", "ÿ£ÿ´ÿ±", "ÿ∂ÿ±ÿ±", "ÿØŸÖÿßÿ±", "ÿ∂ÿ≠Ÿäÿ©", "ÿµŸàÿ±ÿ© ÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™"]
        },
        "responses": {
            "fr": """
üí• **CONS√âQUENCES DES TSUNAMIS**

**Impacts imm√©diats :**
‚Ä¢ **Humain :** Milliers de victimes par noyade, traumatismes
‚Ä¢ **Mat√©riel :** Destruction compl√®te des infrastructures c√¥ti√®res
‚Ä¢ **√âconomique :** Pertes de plusieurs milliards de dollars

**Impacts √† long terme :**
‚Ä¢ **Environnemental :** Salinisation des terres, pollution
‚Ä¢ **Social :** D√©placement de populations, traumatismes psychologiques
‚Ä¢ **Sanitaire :** Risques d'√©pid√©mies, eau contamin√©e

**Exemples historiques :**
‚Ä¢ 2004 Oc√©an Indien : 230,000 victimes
‚Ä¢ 2011 Japon : 18,000 victimes + catastrophe nucl√©aire
            """,
            "en": """
üí• **TSUNAMI CONSEQUENCES**

**Immediate impacts:**
‚Ä¢ **Human:** Thousands of victims by drowning, trauma
‚Ä¢ **Material:** Complete destruction of coastal infrastructure
‚Ä¢ **Economic:** Losses of several billion dollars

**Long-term impacts:**
‚Ä¢ **Environmental:** Land salinization, pollution
‚Ä¢ **Social:** Population displacement, psychological trauma
‚Ä¢ **Health:** Epidemic risks, contaminated water

**Historical examples:**
‚Ä¢ 2004 Indian Ocean: 230,000 victims
‚Ä¢ 2011 Japan: 18,000 victims + nuclear disaster
            """,
            "ar": """
üí• **ÿπŸàÿßŸÇÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä**

**ÿßŸÑÿ¢ÿ´ÿßÿ± ÿßŸÑŸÅŸàÿ±Ÿäÿ©:**
‚Ä¢ **ÿßŸÑÿ®ÿ¥ÿ±Ÿäÿ©:** ÿ¢ŸÑÿßŸÅ ÿßŸÑÿ∂ÿ≠ÿßŸäÿß ÿ®ÿ≥ÿ®ÿ® ÿßŸÑÿ∫ÿ±ŸÇ ŸàÿßŸÑÿµÿØŸÖÿßÿ™
‚Ä¢ **ÿßŸÑŸÖÿßÿØŸäÿ©:** ÿ™ÿØŸÖŸäÿ± ŸÉÿßŸÖŸÑ ŸÑŸÑÿ®ŸÜŸäÿ© ÿßŸÑÿ™ÿ≠ÿ™Ÿäÿ© ÿßŸÑÿ≥ÿßÿ≠ŸÑŸäÿ©
‚Ä¢ **ÿßŸÑÿßŸÇÿ™ÿµÿßÿØŸäÿ©:** ÿÆÿ≥ÿßÿ¶ÿ± ÿ®ŸÖŸÑŸäÿßÿ±ÿßÿ™ ÿßŸÑÿØŸàŸÑÿßÿ±ÿßÿ™

**ÿßŸÑÿ¢ÿ´ÿßÿ± ÿ∑ŸàŸäŸÑÿ© ÿßŸÑŸÖÿØŸâ:**
‚Ä¢ **ÿßŸÑÿ®Ÿäÿ¶Ÿäÿ©:** ÿ™ŸÖŸÑŸäÿ≠ ÿßŸÑÿ£ÿ±ÿßÿ∂Ÿäÿå ÿßŸÑÿ™ŸÑŸàÿ´
‚Ä¢ **ÿßŸÑÿßÿ¨ÿ™ŸÖÿßÿπŸäÿ©:** ŸÜÿ≤Ÿàÿ≠ ÿßŸÑÿ≥ŸÉÿßŸÜÿå ÿßŸÑÿµÿØŸÖÿßÿ™ ÿßŸÑŸÜŸÅÿ≥Ÿäÿ©
‚Ä¢ **ÿßŸÑÿµÿ≠Ÿäÿ©:** ŸÖÿÆÿßÿ∑ÿ± ÿßŸÑÿ£Ÿàÿ®ÿ¶ÿ©ÿå ÿ™ŸÑŸàÿ´ ÿßŸÑŸÖŸäÿßŸá

**ÿ£ŸÖÿ´ŸÑÿ© ÿ™ÿßÿ±ŸäÿÆŸäÿ©:**
‚Ä¢ 2004 ÿßŸÑŸÖÿ≠Ÿäÿ∑ ÿßŸÑŸáŸÜÿØŸä: 230,000 ÿ∂ÿ≠Ÿäÿ©
‚Ä¢ 2011 ÿßŸÑŸäÿßÿ®ÿßŸÜ: 18,000 ÿ∂ÿ≠Ÿäÿ© + ŸÉÿßÿ±ÿ´ÿ© ŸÜŸàŸàŸäÿ©
            """
        }
    },
    
    "safety": {
        "keywords": {
            "fr": ["s√©curit√©", "danger", "que faire", "√©vacuer", "alerte", "prot√©ger", "survie", "image s√©curit√©"],
            "en": ["safety", "danger", "what to do", "evacuate", "alert", "protect", "survival", "safety image"],
            "ar": ["ÿ£ŸÖÿßŸÜ", "ÿÆÿ∑ÿ±", "ŸÖÿßÿ∞ÿß ÿ£ŸÅÿπŸÑ", "ÿ•ÿÆŸÑÿßÿ°", "ÿ•ŸÜÿ∞ÿßÿ±", "ÿ≠ŸÖÿßŸäÿ©", "ŸÜÿ¨ÿßÿ©", "ÿµŸàÿ±ÿ© ÿ≥ŸÑÿßŸÖÿ©"]
        },
        "responses": {
            "fr": """
üõ°Ô∏è **S√âCURIT√â - R√àGLES VITALES**

**Signes d'alerte naturels :**
‚Ä¢ S√©isme prolong√© (>20 secondes)
‚Ä¢ Retrait soudain et inhabituel de la mer
‚Ä¢ Bruit rugissant venant de l'oc√©an

**Actions IMM√âDIATES :**
1. üèÉ **√âloignez-vous du rivage** - Ne restez pas pour observer
2. ‚¨ÜÔ∏è **Gagnez les hauteurs** - Minimum 15m, id√©alement 30m
3. üö´ **Ne prenez pas votre voiture** - Elle cr√©e des embouteillages mortels
4. üìû **Alertez les personnes autour** - Criez pour pr√©venir
5. üì± **Restez inform√©** - Suivez les consignes officielles

**Num√©ros d'urgence :** 112 (Europe) ‚Ä¢ 911 (USA) ‚Ä¢ 999 (UK)
            """,
            "en": """
üõ°Ô∏è **SAFETY - VITAL RULES**

**Natural warning signs:**
‚Ä¢ Prolonged earthquake (>20 seconds)
‚Ä¢ Sudden unusual sea retreat
‚Ä¢ Roaring noise from ocean

**IMMEDIATE actions:**
1. üèÉ **Move away from shore** - Don't stay to observe
2. ‚¨ÜÔ∏è **Reach high ground** - Minimum 15m, ideally 30m
3. üö´ **Don't take your car** - Creates deadly traffic jams
4. üìû **Alert people around** - Shout to warn
5. üì± **Stay informed** - Follow official instructions

**Emergency numbers:** 112 (Europe) ‚Ä¢ 911 (USA) ‚Ä¢ 999 (UK)
            """,
            "ar": """
üõ°Ô∏è **ÿßŸÑÿ≥ŸÑÿßŸÖÿ© - ŸÇŸàÿßÿπÿØ ÿ≠ŸäŸàŸäÿ©**

**ÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑÿ™ÿ≠ÿ∞Ÿäÿ± ÿßŸÑÿ∑ÿ®ŸäÿπŸäÿ©:**
‚Ä¢ ÿ≤ŸÑÿ≤ÿßŸÑ ÿ∑ŸàŸäŸÑ ÿßŸÑÿ£ŸÖÿØ (>20 ÿ´ÿßŸÜŸäÿ©)
‚Ä¢ ÿßŸÜÿ≥ÿ≠ÿßÿ® ŸÖŸÅÿßÿ¨ÿ¶ Ÿàÿ∫Ÿäÿ± ÿπÿßÿØŸä ŸÑŸÑÿ®ÿ≠ÿ±
‚Ä¢ ÿ∂ÿ¨Ÿäÿ¨ ŸáÿØŸäÿ± ŸÇÿßÿØŸÖ ŸÖŸÜ ÿßŸÑŸÖÿ≠Ÿäÿ∑

**ÿßŸÑÿ•ÿ¨ÿ±ÿßÿ°ÿßÿ™ ÿßŸÑŸÅŸàÿ±Ÿäÿ©:**
1. üèÉ **ÿßÿ®ÿ™ÿπÿØ ÿπŸÜ ÿßŸÑÿ¥ÿßÿ∑ÿ¶** - ŸÑÿß ÿ™ÿ®ŸÇŸâ ŸÑŸÑŸÖÿ±ÿßŸÇÿ®ÿ©
2. ‚¨ÜÔ∏è **ÿßÿ™ÿ¨Ÿá ÿ•ŸÑŸâ ÿßŸÑŸÖÿ±ÿ™ŸÅÿπÿßÿ™** - 15 ŸÖÿ™ÿ± ŸÉÿ≠ÿØ ÿ£ÿØŸÜŸâÿå 30 ŸÖÿ™ÿ± ÿ®ÿ¥ŸÉŸÑ ŸÖÿ´ÿßŸÑŸä
3. üö´ **ŸÑÿß ÿ™ÿ≥ÿ™ÿÆÿØŸÖ ÿ≥Ÿäÿßÿ±ÿ™ŸÉ** - ÿ™ÿ≥ÿ®ÿ® ÿßÿÆÿ™ŸÜÿßŸÇÿßÿ™ ŸÖÿ±Ÿàÿ±Ÿäÿ© ŸÖŸÖŸäÿ™ÿ©
4. üìû **ÿ≠ÿ∞ÿ± ÿßŸÑÿ£ÿ¥ÿÆÿßÿµ ÿ≠ŸàŸÑŸÉ** - ÿßÿµÿ±ÿÆ ŸÑŸÑÿ™ÿ≠ÿ∞Ÿäÿ±
5. üì± **ÿßÿ®ŸÇ ÿπŸÑŸâ ÿßÿ∑ŸÑÿßÿπ** - ÿßÿ™ÿ®ÿπ ÿßŸÑÿ™ÿπŸÑŸäŸÖÿßÿ™ ÿßŸÑÿ±ÿ≥ŸÖŸäÿ©

**ÿ£ÿ±ŸÇÿßŸÖ ÿßŸÑÿ∑Ÿàÿßÿ±ÿ¶:** 112 (ÿ£Ÿàÿ±Ÿàÿ®ÿß) ‚Ä¢ 911 (ÿßŸÑŸàŸÑÿßŸäÿßÿ™ ÿßŸÑŸÖÿ™ÿ≠ÿØÿ©) ‚Ä¢ 999 (ÿßŸÑŸÖŸÖŸÑŸÉÿ© ÿßŸÑŸÖÿ™ÿ≠ÿØÿ©)
            """
        }
    }
}

# ==================== SYST√àME INTELLIGENT DE RECHERCHE ====================

def find_best_response(user_input, language):
    """Trouve la meilleure r√©ponse bas√©e sur les mots-cl√©s dans toutes les langues"""
    user_input_lower = user_input.lower()
    
    # V√©rifier d'abord les demandes explicites d'images
    image_keywords = {
        "fr": ["image", "photo", "diagramme", "sch√©ma", "illustration", "montre", "voir"],
        "en": ["image", "picture", "diagram", "schema", "illustration", "show", "see"],
        "ar": ["ÿµŸàÿ±ÿ©", "ÿ±ÿ≥ŸÖ", "ŸÖÿÆÿ∑ÿ∑", "ÿ™Ÿàÿ∂Ÿäÿ≠", "ÿ£ÿ±ŸÜŸä", "ÿπÿ±ÿ∂"]
    }
    
    has_image_request = any(keyword in user_input_lower for keyword in image_keywords[language])
    
    # Recherche dans la langue actuelle pour chaque cat√©gorie
    for category, data in KNOWLEDGE_BASE.items():
        for keyword in data["keywords"][language]:
            if keyword.lower() in user_input_lower:
                # G√©n√©rer une image pour cette cat√©gorie
                image_base64 = create_educational_image(category, language)
                return data["responses"][language], image_base64, category
    
    # Si demande d'image explicite mais pas de cat√©gorie trouv√©e
    if has_image_request:
        # G√©n√©rer une image g√©n√©rale
        image_base64 = create_educational_image("definition", language)
        default_image_responses = {
            "fr": "üñºÔ∏è **Voici une illustration √©ducative sur les tsunamis.**\n\nPosez une question plus sp√©cifique comme 'image causes tsunami' ou 'diagramme s√©curit√©' pour des illustrations cibl√©es.",
            "en": "üñºÔ∏è **Here's an educational illustration about tsunamis.**\n\nAsk a more specific question like 'tsunami causes image' or 'safety diagram' for targeted illustrations.",
            "ar": "üñºÔ∏è **Ÿáÿß ŸáŸä ÿ±ÿ≥ŸÖ ÿ™Ÿàÿ∂Ÿäÿ≠Ÿä ÿ™ÿπŸÑŸäŸÖŸä ÿπŸÜ ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä.**\n\nÿßÿ∑ÿ±ÿ≠ ÿ≥ÿ§ÿßŸÑÿßŸã ÿ£ŸÉÿ´ÿ± ÿ™ÿ≠ÿØŸäÿØÿßŸã ŸÖÿ´ŸÑ 'ÿµŸàÿ±ÿ© ÿ£ÿ≥ÿ®ÿßÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä' ÿ£Ÿà 'ŸÖÿÆÿ∑ÿ∑ ÿßŸÑÿ≥ŸÑÿßŸÖÿ©' ŸÑŸÑÿ≠ÿµŸàŸÑ ÿπŸÑŸâ ÿ±ÿ≥ŸàŸÖ ÿ™Ÿàÿ∂Ÿäÿ≠Ÿäÿ© ŸÖÿ≥ÿ™ŸáÿØŸÅÿ©."
        }
        return default_image_responses[language], image_base64, "definition"
    
    # Si aucune correspondance, r√©ponse par d√©faut
    default_responses = {
        "fr": "ü§ñ **Assistant Tsunami:** Posez-moi sur : d√©finition, causes, cons√©quences ou s√©curit√©. Essayez 'd√©finition tsunami' ou 'image s√©curit√© tsunami'",
        "en": "ü§ñ **Tsunami Assistant:** Ask me about: definition, causes, consequences or safety. Try 'tsunami definition' or 'tsunami safety image'",
        "ar": "ü§ñ **ŸÖÿ≥ÿßÿπÿØ ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä:** ÿßÿ≥ÿ£ŸÑŸÜŸä ÿπŸÜ: ÿßŸÑÿ™ÿπÿ±ŸäŸÅÿå ÿßŸÑÿ£ÿ≥ÿ®ÿßÿ®ÿå ÿßŸÑÿπŸàÿßŸÇÿ® ÿ£Ÿà ÿßŸÑÿ≥ŸÑÿßŸÖÿ©. ÿ¨ÿ±ÿ® 'ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä' ÿ£Ÿà 'ÿµŸàÿ±ÿ© ÿ≥ŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä'"
    }
    
    return default_responses[language], None, None

def display_text_with_direction(text, language):
    """Affiche le texte avec la bonne direction (RTL pour l'arabe)"""
    if language == "ar":
        st.markdown(f'<div class="arabic-text">{text}</div>', unsafe_allow_html=True)
    else:
        st.markdown(text)

# ==================== INTERFACE STREAMLIT ====================

# Header personnalis√©
st.markdown('<div class="main-header">üö® Tsunami AI Expert</div>', unsafe_allow_html=True)
st.markdown('<div class="sub-header">Syst√®me Expert Multilingue ‚Ä¢ G√©n√©ration d\'Images ‚Ä¢ R√©ponses Intelligentes</div>', unsafe_allow_html=True)

# Sidebar moderne
with st.sidebar:
    st.markdown('<div class="sidebar-content">', unsafe_allow_html=True)
    
    st.markdown("### üåç S√©lection de la Langue")
    selected_language = st.radio("", list(LANGUAGES.keys()))
    current_lang = LANGUAGES[selected_language]
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown('<div class="sidebar-content">', unsafe_allow_html=True)
    st.markdown("### üéØ Questions Rapides")
    
    quick_questions = {
        "fr": [
            "Image d√©finition tsunami",
            "Diagramme causes tsunami", 
            "Illustration cons√©quences",
            "Sch√©ma s√©curit√© tsunami"
        ],
        "en": [
            "Tsunami definition image",
            "Tsunami causes diagram",
            "Consequences illustration", 
            "Tsunami safety schema"
        ],
        "ar": [
            "ÿµŸàÿ±ÿ© ÿ™ÿπÿ±ŸäŸÅ ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä",
            "ŸÖÿÆÿ∑ÿ∑ ÿ£ÿ≥ÿ®ÿßÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä",
            "ÿ±ÿ≥ŸÖ ÿπŸàÿßŸÇÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä",
            "ÿ±ÿ≥ŸÖ ÿ≥ŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"
        ]
    }
    
    for question in quick_questions[current_lang]:
        if st.button(question, key=f"btn_{question}"):
            st.session_state.auto_question = question
    
    st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown('<div class="emergency-box">', unsafe_allow_html=True)
    st.markdown("### üö® URGENCE")
    st.markdown("**√âloignez-vous du rivage IMM√âDIATEMENT!**")
    st.markdown("112 ‚Ä¢ 911 ‚Ä¢ 999")
    st.markdown("</div>", unsafe_allow_html=True)

# Zone de chat principale
st.markdown('<div class="chat-container">', unsafe_allow_html=True)

# Historique de conversation
if "messages" not in st.session_state:
    welcome_messages = {
        "fr": "ü§ñ **Bienvenue!** Je suis votre expert Tsunami. Demandez-moi des informations ou g√©n√©rez des images √©ducatives en utilisant des mots comme 'image', 'diagramme' ou 'illustration'.",
        "en": "ü§ñ **Welcome!** I'm your Tsunami expert. Ask me for information or generate educational images using words like 'image', 'diagram' or 'illustration'.",
        "ar": "ü§ñ **ÿ£ŸáŸÑÿßŸã Ÿàÿ≥ŸáŸÑÿßŸã!** ÿ£ŸÜÿß ÿÆÿ®Ÿäÿ± ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä ÿßŸÑÿÆÿßÿµ ÿ®ŸÉ. ÿßÿ≥ÿ£ŸÑŸÜŸä ÿπŸÜ ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ£Ÿà ÿ£ŸÜÿ¥ÿ¶ ÿµŸàÿ±Ÿãÿß ÿ™ÿπŸÑŸäŸÖŸäÿ© ÿ®ÿßÿ≥ÿ™ÿÆÿØÿßŸÖ ŸÉŸÑŸÖÿßÿ™ ŸÖÿ´ŸÑ 'ÿµŸàÿ±ÿ©' ÿ£Ÿà 'ŸÖÿÆÿ∑ÿ∑' ÿ£Ÿà 'ÿ±ÿ≥ŸÖ'."
    }
    st.session_state.messages = [
        {"role": "assistant", "content": welcome_messages[current_lang], "image_data": None, "category": None}
    ]

# Affichage de l'historique
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        display_text_with_direction(message["content"], current_lang)
        
        if message.get("image_data"):
            captions = {
                "definition": {"fr": "Diagramme explicatif du tsunami", "en": "Tsunami explanatory diagram", "ar": "ŸÖÿÆÿ∑ÿ∑ ÿ™Ÿàÿ∂Ÿäÿ≠Ÿä ŸÑŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"},
                "causes": {"fr": "Illustration des causes du tsunami", "en": "Tsunami causes illustration", "ar": "ÿ±ÿ≥ŸÖ ÿ™Ÿàÿ∂Ÿäÿ≠Ÿä ŸÑÿ£ÿ≥ÿ®ÿßÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"},
                "consequences": {"fr": "Impacts et cons√©quences du tsunami", "en": "Tsunami impacts and consequences", "ar": "ÿ™ÿ£ÿ´Ÿäÿ±ÿßÿ™ ŸàÿπŸàÿßŸÇÿ® ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"},
                "safety": {"fr": "R√®gles de s√©curit√© tsunami", "en": "Tsunami safety rules", "ar": "ŸÇŸàÿßÿπÿØ ÿ≥ŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ≥ŸàŸÜÿßŸÖŸä"}
            }
            
            caption = captions.get(message.get("category", ""), {}).get(current_lang, "Illustration √©ducative")
            display_base64_image(message["image_data"], caption)

# Gestion des questions automatiques
if "auto_question" in st.session_state:
    prompt = st.session_state.auto_question
    del st.session_state.auto_question
else:
    prompt = None

# Input utilisateur
if prompt or (user_input := st.chat_input("üí¨ Tapez votre question ou 'image' pour g√©n√©rer...")):
    
    if not prompt:
        prompt = user_input
    
    # Ajout du message utilisateur
    st.session_state.messages.append({"role": "user", "content": prompt, "image_data": None, "category": None})
    
    # Simulation de chargement
    with st.spinner("üé® G√©n√©ration de l'image et de la r√©ponse..."):
        time.sleep(0.5)
        
        # Recherche intelligente
        response, image_data, category = find_best_response(prompt, current_lang)
        
        # Ajout de la r√©ponse
        st.session_state.messages.append({
            "role": "assistant", 
            "content": response,
            "image_data": image_data,
            "category": category
        })
        
        # Rechargement
        st.rerun()

st.markdown("</div>", unsafe_allow_html=True)

# Footer informatif
st.markdown("---")
col1, col2, col3 = st.columns(3)
with col1:
    st.markdown("**üéØ Mots-cl√©s Images**")
    st.markdown("image ‚Ä¢ diagramme ‚Ä¢ illustration ‚Ä¢ sch√©ma")
with col2:
    st.markdown("**üåç Multilingue**") 
    st.markdown("Fran√ßais ‚Ä¢ English ‚Ä¢ ÿßŸÑÿπÿ±ÿ®Ÿäÿ©")
with col3:
    st.markdown("**üñºÔ∏è G√©n√©ration auto**")
    st.markdown("Images √©ducatives ‚Ä¢ Temps r√©el")
